06.02.2024
Parsing FEN strings determines ordering of piece lists in Position. Consequently it determines move generation order. 
So probably this will cause engine to play color-flipped position much weaker/ stronger.
Should either do some nice move ordering or at least shuffle generated moves at random?

08.02.2024
Thinking about attack LUT and promotions. At first I thought that I should consider promotions in attack LUT 
(e.g pawn should square on the other side  the board be flagged as 'attacked by pawn on promotion rank'). But then I realized
that the table is indexed by square difference, not by actual squares. So one entry in the table can originate from arbitrary rank-
not necessarily from the promoting rank.
Looks like promoting and then looking up is the way to go. Also.. pretty natural in typical movegen algorithm (generate pseudolegal and then filter out illegal)

15.02.2024
Done with perft test suite. Machess completes the suite in ~46.6 seconds; magog completes the same test in ~27.0 s! Great!

22.03.2024
Done with iterative perft. The implementation is on the "iterativePerft" branch. 
Perftsuite (recursive) done in ~27.4 s. Iterative version completed in ~27-29s. 
Disappointing result - was expecting some speedup after reading https://www.talkchess.com/forum3/viewtopic.php?t=53408

26.03.2024
Done with basic static position evaluation. Includes material and mobility. I've decided to copy-paste-modify original move generation code rather
than make the old one more general. This way I can skip the need for slice with moves completely. As a bonus I discovered that I can skip 
some superfluous legality tests:
-now I have one legality test for all 4 promotions
-no need to do legality test after castling
Another minor optimization: appending four promotions at once

28.03.2024
Movegen with checking for doublechecks: ~23,2s

05.04.2024
Movegen with specialized movegen in leaf nodes (doublechecks, captures, interpo)

23.04.2024
Couldn't get movegen any faster really. Version with pin checking is way slower. Would like to investigate later. All the intermediate work is left at 
specialized_movegen branch.

24.04.2024
Testing search and evaluate/score functions. Found an interesting bug while calculating mobility score. When calculating mobility of enemy pieces (the ones that are not moving).
The piece tries to take its own pawn because the enPassant square is set. So simply making a null-move does not guarrantee calculating correct mobility of enemy pieces. Luckily
this caused panic and rather than falfifying mobility score. So clean crash rather than elusive bug. Probably Machess engine has the same bug that went undetected!