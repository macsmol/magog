06.02.2024
Parsing FEN strings determines ordering of piece lists in Position. Consequently it determines move generation order. 
So probably this will cause engine to play color-flipped position much weaker/ stronger.
Should either do some nice move ordering or at least shuffle generated moves at random?

08.02.2024
Thinking about attack LUT and promotions. At first I thought that I should consider promotions in attack LUT 
(e.g pawn should square on the other side  the board be flagged as 'attacked by pawn on promotion rank'). But then I realized
that the table is indexed by square difference, not by actual squares. So one entry in the table can originate from arbitrary rank-
not necessarily from the promoting rank.
Looks like promoting and then looking up is the way to go. Also.. pretty natural in typical movegen algorithm (generate pseudolegal and then filter out illegal)

15.02.2024
Done with perft test suite. Machess completes the suite in ~46.6 seconds; magog completes the same test in ~27.0 s! Great!

22.03.2024
Done with iterative perft. The implementation is on the "iterativePerft" branch. 
Perftsuite (recursive) done in ~27.4 s. Iterative version completed in ~27-29s. 
Disappointing result - was expecting some speedup after reading https://www.talkchess.com/forum3/viewtopic.php?t=53408

26.03.2024
Done with basic static position evaluation. Includes material and mobility. I've decided to copy-paste-modify original move generation code rather
than make the old one more general. This way I can skip the need for slice with moves completely. As a bonus I discovered that I can skip 
some superfluous legality tests:
-now I have one legality test for all 4 promotions
-no need to do legality test after castling
Another minor optimization: appending four promotions at once

28.03.2024
Movegen with checking for doublechecks: ~23,2s

05.04.2024
Movegen with specialized movegen in leaf nodes (doublechecks, captures, interpo)

23.04.2024
Couldn't get movegen any faster really. Version with pin checking is way slower. Would like to investigate later. All the intermediate work is left at 
specialized_movegen branch.

24.04.2024
Testing search and evaluate/score functions. Found an interesting bug while calculating mobility score. When calculating mobility of enemy pieces (the ones that are not moving).
The piece tries to take its own pawn because the enPassant square is set. So simply making a null-move does not guarrantee calculating correct mobility of enemy pieces. Luckily
this caused panic and rather than falfifying mobility score. So clean crash rather than elusive bug. Probably Machess engine has the same bug that went undetected!

09.05.2024
About iterative deepening under time control.
Just finished one of the first games against engine. I added a timeout condition in the search loop. This way engine does not spend too much time searching exhaustively at 
depth reached (which makes it loose on time).
However we cannot simply break out from the search loop in arbitrary moment because this will cause engine to miss obvious moves. Specifically we must not quit right after descending
on depth deeper. Here a relevant log from Arena with my comments added:

    2024-05-06 19:56:02,164-->1:position startpos moves e2e4 c7c5 g1f3 d8c7 f1c4 e7e6 b1c3 d7d6 d2d3 c7d8 c1e3 g7g6 d1d2 b8c6 e3g5  // black to move, black queen at d8 is hanging
    2024-05-06 19:56:02,164-->1:go wtime 239171 btime 236628 winc 0 binc 0
    2024-05-06 19:56:02,165<--1:info score 305 pv d8g5 depth 1
    2024-05-06 19:56:02,171<--1:info score -180 pv d8a5 c4e6 depth 2
    2024-05-06 19:56:02,332<--1:info score 65 pv d8a5 b2b4 c5b4 depth 3
    2024-05-06 19:56:08,700<--1:info score -190 pv f8e7 c4b5 e7g5 b5c6 depth 4                                                      // completed search at depth 4 - found reasonable continuation
    2024-05-06 19:56:10,052<--1:timeout!                                                                                            // timeout reached while searching at depth 5 - starting to return from recursive calls
    2024-05-06 19:56:10,052<--1:timeout!
    2024-05-06 19:56:10,053<--1:timeout!
    2024-05-06 19:56:10,053<--1:timeout!
    2024-05-06 19:56:10,053<--1:timeout!    
    2024-05-06 19:56:10,053<--1:info score -10 pv f8g7 c3b5 g7c3 d2c3 d8g5 depth 5                                                  // what is returned is a search partially completed searched at depth 5 - it didn't even see that queen is hanging, 
    2024-05-06 19:56:10,055<--1:info pv f8g7 c3b5 g7c3 d2c3 d8g5
    2024-05-06 19:56:10,055<--1:bestmove f8g7                                                                                       // engine hangs a queen

09.05.2024 - 2
Got it working but still got the following situation where it hangs the queen. But this blunder can be attributed to lack of quiescence search 
(obviously it thinks it captured a piece at the end of the line). Log below:

    position startpos moves e2e4 e7e6 f1c4 d8f6 b1c3 f6d4 g1f3 d4c4 d2d3
    go wtime 332611 btime 261957 winc 0 binc 0 
    info pv  b8a6 score 315
    info pv  b8c6 score 335
    info pv  c4c3 score 780
    info score 780 pv c4c3 depth 1
    info pv  c4c3 b2c3 score -320
    info pv  c4c5 c1g5 score 280
    info pv  c4b4 c1g5 score 305
    info score 305 pv c4b4 c1g5 depth 2
    info pv  c4b4 e1e2 b4c3 score 645
    info score 645 pv c4b4 e1e2 b4c3 depth 3
    info pv  c4b4 f3g5 b8c6 g5f7 score 230
    info score 230 pv c4b4 f3g5 b8c6 g5f7 depth 4
    info pv  c4b4 a2a3 b4c5 c3e2 c5f2 score 585                          // at depth 5 started of with line similar from depth 4
    info pv  f8d6 f3g5 c4b4 c1d2 b4c3 score 655                          // but falsely found "sth even better" - end of this sequence hangs a queen
    info score 655 pv f8d6 f3g5 c4b4 c1d2 b4c3 depth 5
    info pv f8d6 f3g5 c4b4 c1d2 b4c3 score 655
    bestmove f8d6

17.05.2024
Completed quiescence search. Dode a 10 round tournament against Machess (5 openings as both black and white). Results are kind of disappointing :).
It lost all 10 out of 10 rounds! :)
Looks like it is simply slower. In scandinavian defense machess took 6 seconds to find the e4e5. 
Magog took 6s for the same move.
Time to investigate - probably it is due to bad move ordering machess searches captures first 
(and also has separate piece list per piece type)
but it could also be a problem with small NPS.. (simply slow raw movegen and evaluation function)

22.05.2024
Yup the engine has 200k less nps than Machess (~500k vs ~300k). Did some profiling with go pprof and found out that 
isUnderCheckMethod appears quite high on the list.
To be more specific switch in that method is quite hot.

Here's a pprof list (note that it's not exactly from the commited version - this is a color-blind of the switch cases - see lines: 296, 297, 302.. anyway the results are on par)

    (pprof) list isUnderCheck
    Total: 28.55s
    ROUTINE ======================== macsmol/magog/engine.(*Position).isUnderCheck in C:\Users\Maciej\workspaces\go\magog\engine\position.go
        3.47s      3.73s (flat, cum) 13.06% of Total
        60ms       60ms    292:func (pos *Position) isUnderCheck(enemyPieces []square, enemyKing square, destSquare square) bool {
            .          .    293:   var moveIdx int16
        300ms      300ms    294:   for _, attackFrom := range enemyPieces {
        60ms      260ms    295:           moveIdx = moveIndex(attackFrom, destSquare)
        1.17s      1.17s    296:           switch pos.board[attackFrom]&ColorlessPiece {       
            .          .    297:           case Knight:
        170ms      170ms    298:                   if attackTable[moveIdx]&KnightAttacks == 0 {
            .          .    299:                           continue
            .          .    300:                   }
            .          .    301:                   return true

So I thought that maybe the switch in Golang is kindof slow (a premonition I have ever since I 
debugged a switch statement in Golang - for some reason you never jump directly to the desired case, you have to step over few times. This never happened in Java).
Following that lead I've made a version that uses a LUT with isCheckedByXX function containing
functions for each piece. This worked much slower (~200k nps). 
Here's the relevant listing:

    (pprof) list Check
    Total: 36.26s
    ROUTINE ======================== macsmol/magog/engine.(*Position).isUnderCheck in C:\Users\Maciej\workspaces\go\magog\engine\position.go
        3.63s      7.63s (flat, cum) 21.04% of Total
        140ms      140ms    332:func (pos *Position) isUnderCheck(enemyPieces []square, enemyKing square, destSquare square) bool {
            .          .    333:   var moveIdx int16
        760ms      760ms    334:   for _, attackFrom := range enemyPieces {
        10ms      2.24s    335:           moveIdx = moveIndex(attackFrom, destSquare)
        480ms      480ms    336:           lutIdx := pos.board[attackFrom] & ColorlessPiece - 1
        2.18s      3.92s    337:           if checkFunctionsLUT[lutIdx](attackFrom, destSquare, moveIdx, &pos.board) {
            .          .    338:                   return true
            .          .    339:           }
            .          .    340:   }
            .          .    341:
            .       30ms    342:   moveIdx = moveIndex(enemyKing, destSquare)
        40ms       40ms    343:   kingAttack := attackTable[moveIdx]&KingAttacks != 0
        20ms       20ms    344:   return kingAttack
            .          .    345:}
            .          .    346:
            .          .    347:func checkedBySlidingPiece(slidingPieceSquare, destSquare square, moveIndex int16, board *[128]piece) bool {


25.05.2024
Search on depth 7 never finishes! Wait. It was for search from start pos. perft(7, startpos) has 3*10^9 nodes. So maybe not a bug. 

anyway
here's log:

    go depth 7
    info pv e2e3 d7d5 f1b5 c7c6 score cp 25 depth 4 nodes 278733 time 682 nps 408525
    info nodes 500000 time 1242 nps 402389
    info pv e2e3 e7e5 d1g4 h7h5 g4e4 score cp 60 depth 5 nodes 751466 time 1921 nps 391035
    info nodes 1000000 time 2449 nps 408190
    info nodes 1500000 time 3512 nps 427077
    info nodes 2000000 time 4585 nps 436121
    ...
    info nodes 5500000 time 12584 nps 437040
    info pv e2e3 e7e5 d1g4 h7h5 g4e4 score cp 60 depth 5 nodes 5515234 time 12617 nps 437105
    info nodes 6000000 time 14202 nps 422472
    ....
    sinfo nodes 14000000 time 37463 nps 373698
    top
    info pv e2e3 e7e6 d1f3 g8h6 h2h4 f8b4 score cp 5 depth 6 nodes 14154176 time 37965 nps 372812
    info pv e2e3 e7e6 d1f3 g8h6 h2h4 f8b4 score cp 5 depth 6 nodes 14154176 time 37965 nps 372812
    bestmove e2e3
    go depth 7
    info pv e2e3 d7d5 f1b5 c7c6 score cp 25 depth 4 nodes 278731 time 679 nps 410017
    info nodes 500000 time 1241 nps 402897
    info pv e2e3 e7e5 d1g4 h7h5 g4e4 score cp 60 depth 5 nodes 751464 time 1900 nps 395341
    info nodes 1000000 time 2423 nps 412608
    info nodes 1500000 time 3458 nps 433652
    info nodes 2000000 time 4519 nps 442488
    info nodes 2500000 time 5622 nps 444664
    info nodes 3000000 time 6849 nps 437956
    info nodes 3500000 time 7917 nps 442047
    info nodes 4000000 time 9040 nps 442470
    info nodes 4500000 time 10297 nps 437014
    info nodes 5000000 time 11450 nps 436643
    info nodes 5500000 time 12513 nps 439512
    info pv e2e3 e7e5 d1g4 h7h5 g4e4 score cp 60 depth 5 nodes 5515232 time 12549 nps 439467
    info nodes 6000000 time 14121 nps 424869
    info nodes 6500000 time 15950 nps 407519
    info nodes 7000000 time 17591 nps 397926
    [...]
    info nodes 19500000 time 52613 nps 370623
    info pv e2e3 e7e5 d1g4 h7h5 g4f5 d8f6 score cp 20 depth 6 nodes 19769425 time 53366 nps 370448
    info nodes 20000000 time 54043 nps 370069
    [...]
    info nodes 214000000 time 585191 nps 365692
    info pv e2e3 e7e5 d1g4 h7h5 g4f5 d8f6 score cp 20 depth 6 nodes 214337518 time 586065 nps 365722        
    info nodes 214500000 time 586629 nps 365648
    [...]
    info nodes 681000000 time 1943027 nps 350483
    info pv e2e3 e7e5 d1h5 d8f6 b1c3 f8b4 f1b5 score cp 
    40 depth 7 nodes 681371532 time 1943941 nps 350510  
    info nodes 681500000 time 1944231 nps 350524
    [...]
    info nodes 846000000 time 2353820 nps 359415
    info nodes 846500000 time 2355236 nps 359411
    stopinfo nodes 847000000 time 2356474 nps 359435

    info pv e2e3 e7e5 d1h5 d8f6 b1c3 f8b4 f1b5 score cp 40 depth 7 nodes 847008416 time 2356494 nps 359435
    bestmove e2e3



Anyway started new search before leaving house. 
perft(7,startpos can get to 3,1*10^9 nodes) so let's see if my search gets there.

25.05.2024 - 2 Came back after 2 hours and perft (7, startpos) still didn't finish (~800mln nodes after 2 hours). What's worse is I've noticed a slow
but steady degradation in nps. When I came back it dropped down to ~131k. Very strange.
Previous run didn' have the same problem! After the same period of time it maintained the tempo.
I thought that maybe it's int overflow but no. Didn't happen. It's a slow gradual slowdown.
Have a log so maybe I can plot it. Or I can profile it at different time points (how?)

25.05.2024 - 3 ok it's speeding back up as I type! It must have been a problem with laptop 
energy saving mode. I guess I need to display nps based on speed since the last nps log rather than
cumulative nps.

25.05.2024 - 4 ok. it stopped after 6 hours of searching... 

    info nodes 4406000000 time 21573542 nps 204231
    info nodes 4406500000 time 21574983 nps 204241
    info nodes 4407000000 time 21576540 nps 204249
    info nodes 4407500000 time 21577877 nps 204260
    info pv e2e3 e7e5 d1h5 d8f6 b1c3 f8b4 f1b5 score cp 40 depth 7 nodes 4407845429 time 21578963 nps 204265
    bestmove e2e3

The counter didn't overflow - why?
OK. nodes number is higher because of quiescence search.. so that makes sense.

26.05.2024
I've tried to compare prof recordings after my change. I've run go tool as webserver (easiest way to display flamegraphs).
And then I've run into another surprise. I couldn't reliably compare the data - at least the per source line list command.
Old profiles show invalid data interposed on new sources. Basically I was seeing old profile recordings that listed methods that didn't exist at the time.
I've tried to delete the *.exe file but the pprof still run successfully and still has shown the same garbage. I guess I need to recompile exe before running pprof or sth..

27.05.2024
Changed mogeven to generate pawn takes first.
Did test on startpos and search for depth=5 could barely notice any difference in number of nodes evaluated (better
ordering should need fewer nodes evaluation due to some branches being pruned). 
Here are 4 consecutives runs for each implementation:
 
        pawn moves mixed
    5476069
    5499487
    5491873
    5486023
        pawn takes first
    5471470
    5494910
    5497865
    5492182

However when I did search depth=4 from kiwipete position  the story is different
    pawn takes first
    104 763 297	nodes evaluated; (nps: 289365; time: 361134)
    pawn moves mixed 
    info nodes 1741500000 time 5665091 nps 307408 (and counting...)

I had to break  the depth=4 (actually kill the program - there's no break flag in
 quiescence function so stop command wouldn't work). Here are results for depth=3

pawn takes mixed:
    info pv e2a6 e6d5 c3d5 e7e5 score cp 50 depth 3 nodes 134_495_127 time 462728 nps 290656 
    bestmove e2a6
pawn takes first:
    info pv e2a6 e6d5 c3d5 e7e5 score cp 50 depth 3 nodes 26_948_101 time 92187 nps 292319 
    bestmove e2a6

machess for reference:
    info nodes 31172702 pv e2a6 e6d5 c3d5 e7e5 time 142438 depth 3 nps 218849 score cp 50 nodes evaluateddd 31172702
    bestmove e2a6

Note that not only the speed but also the ordering is better here than in Machess!


28.05.2024
Did a rematch. Getting pwnd by machess. Somethings bad with move ordering in timebased play..
Not sure what.
In this situation magog is very likely to miss a mate in 1.

    2024-05-27 18:34:49,129-->1:position startpos moves e2e4 c7c5 f1c4 e7e5 d1h5
    2024-05-27 18:34:49,129-->1:go wtime 285088 btime 280307 winc 0 binc 0
    2024-05-27 18:34:49,718<--1:info pv d8f6 c4f7 f6f7 h5e5 score cp -70 depth 4 nodes 168010 time 581 nps 289162
    2024-05-27 18:34:50,833<--1:info nodes 500000 time 1690 nps 295765
    2024-05-27 18:34:52,566<--1:info nodes 1000000 time 3434 nps 291201
    2024-05-27 18:34:54,259<--1:info nodes 1500000 time 5117 nps 293130
    2024-05-27 18:34:55,983<--1:info nodes 2000000 time 6844 nps 292197
    2024-05-27 18:34:57,689<--1:info nodes 2500000 time 8557 nps 292134
    2024-05-27 18:34:58,486<--1:info pv g8f6 g2g4 d8b6 b1c3 f6h5 g4h5 score cp 585 depth 4 nodes 2737382 time 9347 nps 292855
    2024-05-27 18:34:58,489<--1:info pv g8f6 g2g4 d8b6 b1c3 f6h5 g4h5 score cp 585 depth 4 nodes 2737382 time 9347 nps 292855
    2024-05-27 18:34:58,502<--1:bestmove g8f6
    2024-05-27 18:34:58,502*1*Found move:Ng8-f6

If I let it do search to full depth it does not miss it and plays d8f6. However with the bad timing
(quite likely as it turns out) it plays g8f6 and never reaching reply Qh5f7.
__For some reason it does not happen in machess. I need to add extra logging to it and investigate.
Otherwise this blunder looks like could be rectified with killer moves heuristic...
Or trivial fix would be to never stop searching on odd depths (i.e engine's own moves)

29.05.2024
Ok. So the root cause of blunder was the same as was in Machess some years ago. I mistakenly believed that
results from interrupted alphaBeta search at some depth can be any good. No they are not. 
In general they're can contain horrible blunder (hanging pieces, mates in 1). If engine had alpha beta interrupted then it should just return 
search results from previous iteration of ItDeep (even though some sourcess suggest otherwise).

29.05.2024 - 2
Results after fix:

   Engine               Score          Ma         Ma    S-B
1: Machess-1.0-SNAPSHOT 7,0/10 ·········· =1110=1=1=   21,00
2: Magog.0.4            3,0/10 =0001=0=0= ··········   21,00

29.05.2024 - 3
Magog had a bug in parsing moves list in uci position command. It failed to recognize that double pushes make pawns vulnerable 
to en-passant attacks. Luckily it was rather easy to find because it made the engine to make illegal moves (tried to capture 
with a pawn that wasn't there). So 2 games were lost due to illegal games but 
it made at least one other occasion where it made a blunder in equal position by not taking E-P. Bug fixed.

29.05.2024 - 4
Results are only slightly better:
   Engine               Score          Ma         Ma    S-B
1: Machess-1.0-SNAPSHOT 6,5/10 ·········· =111011=0=   22,75
2: Magog.0.5            3,5/10 =000100=1= ··········   22,75

Here it strongly prefers to trade bishop for 2 pawns. Very strange as machess with the same evaluation function retreats bishop to b4d6 after finishing depth 3. 
However it does play it after full search depth =4 so it's also an ordering/speed issue.

    2024-05-29 19:45:30,790-->2:position startpos moves d2d4 e7e6 d1d3 d8h4 c1d2 b8c6 g1f3 h4g4 h2h3 g4h5 d2g5 f7f6 g2g4 h5g6 d3g6 h7g6 g5d2 d7d5 e2e3 f6f5 g4f5 g6f5 b1c3 g8f6 h1g1 c8d7 c3b5 e8d8 f3g5 d8c8 g5f7 h8h4 f2f4 d7e8 f7e5 c6b4 d2b4 f8b4 c2c3 e8b5 e5g6 h4h5 f1b5
    2024-05-29 19:45:30,790-->2:go wtime 105073 btime 87638 winc 0 binc 0
    2024-05-29 19:45:30,795<--2:info pv a7a6 score cp -30 depth 1 nodes 7 time 0 nps 7000000 
    2024-05-29 19:45:30,810<--2:info pv c7c6 c3b4 c6b5 score cp -20 depth 1 nodes 17 time 0 nps 17000000 
    2024-05-29 19:45:30,825<--2:info pv h5h3 c3b4 h3e3 score cp 10 depth 1 nodes 46 time 0 nps 46000000 
    ... no changes in pv line
    2024-05-29 19:45:30,905<--2:info pv h5h3 c3b4 h3e3 score cp 10 depth 3 nodes 37634 time 97 nps 387328 
    2024-05-29 19:45:30,985<--2:info pv h5h3 c3b4 h3e3 e1d2 score cp -145 depth 4 nodes 74809 time 183 nps 408430 
    2024-05-29 19:45:31,080<--2:info pv a7a6 c3b4 a6b5 g6e7 score cp -125 depth 4 nodes 116083 time 280 nps 413906 
    2024-05-29 19:45:31,971<--2:info nodes 500000 time 1171 nps 426765
    2024-05-29 19:45:32,929<--2:info pv b4d6 h3h4 c7c6 b5d3 score cp -15 depth 4 nodes 914395 time 2136 nps 427968 
    2024-05-29 19:45:33,136<--2:info nodes 1000000 time 2337 nps 427823
    2024-05-29 19:45:33,727<--2:info pv h5h3 c3b4 h3e3 score cp 0 depth 3 nodes 1248174 time 2921 nps 427262 
    2024-05-29 19:45:33,743<--2:bestmove h5h3
    2024-05-29 19:45:33,743*2*Found move:Rh5xh3

